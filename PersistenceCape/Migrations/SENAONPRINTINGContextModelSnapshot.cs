// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersistenceCape.Contexts;

#nullable disable

namespace PersistenceCape.Migrations
{
    [DbContext(typeof(SENAONPRINTINGContext))]
    partial class SENAONPRINTINGContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Modern_Spanish_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataCape.Models.ClientModel", b =>
                {
                    b.Property<long>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_client");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdClient"), 1L, 1);

                    b.Property<string>("Area")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("area");

                    b.Property<string>("Center")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("center");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Regional")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("regional");

                    b.Property<bool?>("StatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("stated_at")
                        .HasDefaultValueSql("('1')");

                    b.HasKey("IdClient")
                        .HasName("pk_CLIENTS");

                    b.ToTable("CLIENTS", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.FinishModel", b =>
                {
                    b.Property<long>("IdFinish")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_finish");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdFinish"), 1L, 1);

                    b.Property<string>("FinishName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("finish_name");

                    b.Property<bool?>("StatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("stated_at")
                        .HasDefaultValueSql("('1')");

                    b.HasKey("IdFinish")
                        .HasName("pk_FINISHES");

                    b.ToTable("FINISHES", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.GrammajeCaliberModel", b =>
                {
                    b.Property<long>("IdGrammajeCaliber")
                        .HasColumnType("bigint")
                        .HasColumnName("id_grammaje_caliber");

                    b.Property<string>("GrammajeCaliber1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("grammaje_caliber");

                    b.Property<string>("TypeGrammajeCaliber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type_grammaje_caliber");

                    b.HasKey("IdGrammajeCaliber");

                    b.ToTable("GRAMMAJE_CALIBER", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.ImpositionPlateModel", b =>
                {
                    b.Property<long>("IdImpositionPlate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_imposition_plate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdImpositionPlate"), 1L, 1);

                    b.Property<string>("ImpositionPlateName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("imposition_plate_name");

                    b.Property<byte[]>("Scheme")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("scheme");

                    b.Property<bool?>("StatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("stated_at")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("IdImpositionPlate");

                    b.ToTable("IMPOSITION_PLATE", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.LineatureModel", b =>
                {
                    b.Property<long>("IdLineature")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_lineature");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdLineature"), 1L, 1);

                    b.Property<string>("Lineature1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lineature");

                    b.Property<string>("Other")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("other");

                    b.Property<bool?>("StatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("stated_at")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("TypePoint")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type_point");

                    b.HasKey("IdLineature");

                    b.ToTable("LINEATURE", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.MachineModel", b =>
                {
                    b.Property<long>("IdMachine")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_machine");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdMachine"), 1L, 1);

                    b.Property<decimal?>("CostByHour")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("cost_by_hour");

                    b.Property<decimal?>("CostByUnit")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("cost_by_unit");

                    b.Property<decimal?>("MaximumHeight")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("maximum_height");

                    b.Property<decimal?>("MaximumWidth")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("maximum_width");

                    b.Property<decimal?>("MinimumHeight")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("minimum_height");

                    b.Property<decimal?>("MinimumWidth")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("minimum_width");

                    b.Property<string>("Name")
                        .HasMaxLength(90)
                        .IsUnicode(false)
                        .HasColumnType("varchar(90)")
                        .HasColumnName("name");

                    b.Property<bool?>("StatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("stated_at")
                        .HasDefaultValueSql("('1')");

                    b.HasKey("IdMachine")
                        .HasName("pk_MACHINES");

                    b.ToTable("MACHINES", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.OrderProductionModel", b =>
                {
                    b.Property<long>("IdOrderProduction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_order_production");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdOrderProduction"), 1L, 1);

                    b.Property<string>("ColorProfile")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("color_profile");

                    b.Property<long?>("IdGrammage")
                        .HasColumnType("bigint")
                        .HasColumnName("id_grammage");

                    b.Property<long?>("IdLineature")
                        .HasColumnType("bigint")
                        .HasColumnName("id_lineature");

                    b.Property<long?>("IdPaperCutSize")
                        .HasColumnType("bigint")
                        .HasColumnName("id_paper_cut_size");

                    b.Property<long?>("IdPlateImposition")
                        .HasColumnType("bigint")
                        .HasColumnName("id_plate_imposition");

                    b.Property<long?>("IdProgram")
                        .HasColumnType("bigint")
                        .HasColumnName("id_program");

                    b.Property<long?>("IdQuotationClient")
                        .HasColumnType("bigint")
                        .HasColumnName("id_quotation_client");

                    b.Property<long?>("IdUser")
                        .HasColumnType("bigint")
                        .HasColumnName("id_user");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("image");

                    b.Property<double?>("Indented")
                        .HasColumnType("float")
                        .HasColumnName("indented");

                    b.Property<string>("InkCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ink_code");

                    b.Property<string>("MaterialReception")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("material_reception");

                    b.Property<string>("Observations")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("observations");

                    b.Property<bool>("OrderStatus")
                        .HasColumnType("bit")
                        .HasColumnName("order_status");

                    b.Property<string>("ProgramVersion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("program_version");

                    b.Property<string>("SpecialInk")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("special_ink");

                    b.Property<bool?>("StatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("stated_at")
                        .HasDefaultValueSql("('1')");

                    b.HasKey("IdOrderProduction")
                        .HasName("pk_Tbl_0");

                    b.HasIndex("IdGrammage");

                    b.HasIndex("IdLineature");

                    b.HasIndex("IdPaperCutSize");

                    b.HasIndex("IdPlateImposition");

                    b.HasIndex("IdProgram");

                    b.HasIndex("IdQuotationClient");

                    b.HasIndex("IdUser");

                    b.ToTable("ORDER_PRODUCTION", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.PaperCutModel", b =>
                {
                    b.Property<long>("IdPaperCut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_paper_cut");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdPaperCut"), 1L, 1);

                    b.Property<string>("PaperCut1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("paper_cut");

                    b.Property<bool?>("StatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("stated_at")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("IdPaperCut");

                    b.ToTable("PAPER_CUT", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.PermissionModel", b =>
                {
                    b.Property<long>("IdPermission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_permission");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdPermission"), 1L, 1);

                    b.Property<string>("Permission1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("permission");

                    b.Property<bool?>("StatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("stated_at")
                        .HasDefaultValueSql("('1')");

                    b.HasKey("IdPermission")
                        .HasName("permissions_id_permission_primary");

                    b.ToTable("PERMISSIONS", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.PermissionsXRoleModel", b =>
                {
                    b.Property<long>("IdPermission")
                        .HasColumnType("bigint")
                        .HasColumnName("id_permission");

                    b.Property<long>("IdRole")
                        .HasColumnType("bigint")
                        .HasColumnName("id_role");

                    b.HasIndex(new[] { "IdPermission" }, "permissions_x_roles_id_permission_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "IdRole" }, "permissions_x_roles_id_role_unique")
                        .IsUnique();

                    b.ToTable("PERMISSIONS_X_ROLES", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.ProductModel", b =>
                {
                    b.Property<long>("IdProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_product");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdProduct"), 1L, 1);

                    b.Property<string>("Characteristics")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("characteristics");

                    b.Property<long>("IdSupply")
                        .HasColumnType("bigint")
                        .HasColumnName("id_supply");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("StatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("stated_at")
                        .HasDefaultValueSql("('1')");

                    b.Property<string>("TypeProduct")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type_product");

                    b.HasKey("IdProduct")
                        .HasName("pk_PRODUCTS");

                    b.ToTable("PRODUCTS", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.ProgramModel", b =>
                {
                    b.Property<long>("IdProgram")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_program");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdProgram"), 1L, 1);

                    b.Property<long>("ProgramName")
                        .HasColumnType("bigint")
                        .HasColumnName("program_name");

                    b.Property<bool?>("StatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("stated_at")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("IdProgram");

                    b.ToTable("PROGRAM", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.ProviderModel", b =>
                {
                    b.Property<long>("IdProvider")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_provider");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdProvider"), 1L, 1);

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("company_address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("NameCompany")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name_company");

                    b.Property<long>("NitCompany")
                        .HasColumnType("bigint")
                        .HasColumnName("nit_company");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone");

                    b.Property<bool?>("StatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("stated_at")
                        .HasDefaultValueSql("('1')");

                    b.HasKey("IdProvider")
                        .HasName("pk_PROVIDERS");

                    b.ToTable("PROVIDERS", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.QuotationClientModel", b =>
                {
                    b.Property<long>("IdQuotationClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_quotation_client");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdQuotationClient"), 1L, 1);

                    b.Property<DateTime?>("DateOrde")
                        .HasColumnType("date")
                        .HasColumnName("date_orde");

                    b.Property<DateTime?>("DeliverDate")
                        .HasColumnType("date")
                        .HasColumnName("deliver_date");

                    b.Property<double?>("FullValue")
                        .HasColumnType("float")
                        .HasColumnName("full_value");

                    b.Property<long?>("IdClient")
                        .HasColumnType("bigint")
                        .HasColumnName("id_client");

                    b.Property<long?>("IdFinishes")
                        .HasColumnType("bigint")
                        .HasColumnName("id_finishes");

                    b.Property<long?>("IdMachine")
                        .HasColumnType("bigint")
                        .HasColumnName("id_machine");

                    b.Property<long?>("IdProduct")
                        .HasColumnType("bigint")
                        .HasColumnName("id_product");

                    b.Property<long?>("IdSubstrate")
                        .HasColumnType("bigint")
                        .HasColumnName("id_substrate");

                    b.Property<long?>("IdTypeService")
                        .HasColumnType("bigint")
                        .HasColumnName("id_type_service");

                    b.Property<long?>("IdUser")
                        .HasColumnType("bigint")
                        .HasColumnName("id_user");

                    b.Property<int?>("InkQuantity")
                        .HasColumnType("int")
                        .HasColumnName("ink_quantity");

                    b.Property<int?>("NumberOfPages")
                        .HasColumnType("int")
                        .HasColumnName("number_of_pages");

                    b.Property<double?>("ProductHigh")
                        .HasColumnType("float")
                        .HasColumnName("product_high");

                    b.Property<int?>("ProductQuantity")
                        .HasColumnType("int")
                        .HasColumnName("product_quantity");

                    b.Property<double?>("ProductWidth")
                        .HasColumnType("float")
                        .HasColumnName("product_width");

                    b.Property<bool>("QuotationStatus")
                        .HasColumnType("bit")
                        .HasColumnName("quotation_status");

                    b.Property<bool?>("StatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("stated_at")
                        .HasDefaultValueSql("('1')");

                    b.Property<string>("TechnicalSpecifications")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("technical_specifications");

                    b.Property<double?>("UnitValue")
                        .HasColumnType("float")
                        .HasColumnName("unit_value");

                    b.HasKey("IdQuotationClient")
                        .HasName("pk_QUOTATION_PRODUCTS");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdFinishes");

                    b.HasIndex("IdMachine");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdTypeService");

                    b.HasIndex("IdUser");

                    b.ToTable("QUOTATION_CLIENTS", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.QuotationProviderModel", b =>
                {
                    b.Property<long>("IdQuotationProvider")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_quotation_provider");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdQuotationProvider"), 1L, 1);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<double?>("FullValue")
                        .HasColumnType("float")
                        .HasColumnName("full_value");

                    b.Property<long?>("IdProvider")
                        .HasColumnType("bigint")
                        .HasColumnName("id_provider");

                    b.Property<byte[]>("QuotationFile")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("quotation_file");

                    b.Property<bool?>("StatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("stated_at")
                        .HasDefaultValueSql("('1')");

                    b.HasKey("IdQuotationProvider")
                        .HasName("pk_QUOTATION_PROVIDERS");

                    b.HasIndex("IdProvider");

                    b.ToTable("QUOTATION_PROVIDERS", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.RoleModel", b =>
                {
                    b.Property<long>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_role");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdRole"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("StatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("stated_at")
                        .HasDefaultValueSql("('1')");

                    b.HasKey("IdRole")
                        .HasName("roles_id_role_primary");

                    b.ToTable("ROLES", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.SubstrateModel", b =>
                {
                    b.Property<long>("IdSubstrate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_substrate");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdSubstrate"), 1L, 1);

                    b.Property<bool>("StatedAt")
                        .HasColumnType("bit")
                        .HasColumnName("stated_at");

                    b.Property<string>("SubstratumName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("substratum_name");

                    b.HasKey("IdSubstrate")
                        .HasName("pk_SUBSTRATES");

                    b.ToTable("SUBSTRATES", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.SubstrateXQuotationClientModel", b =>
                {
                    b.Property<long>("IdQuotationClient")
                        .HasColumnType("bigint")
                        .HasColumnName("id_quotation_client");

                    b.Property<long>("IdSubstrate")
                        .HasColumnType("bigint")
                        .HasColumnName("id_substrate");

                    b.HasIndex("IdQuotationClient");

                    b.HasIndex("IdSubstrate");

                    b.ToTable("SUBSTRATE_X_QUOTATION_CLIENT", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.SupplyCategoriesXSupplyModel", b =>
                {
                    b.Property<long>("IdSupply")
                        .HasColumnType("bigint")
                        .HasColumnName("id_supply");

                    b.Property<long>("IdSupplyCategory")
                        .HasColumnType("bigint")
                        .HasColumnName("id_supply_category");

                    b.HasIndex(new[] { "IdSupplyCategory" }, "supply_categories_x_supply_id_supply_category_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "IdSupply" }, "supply_categories_x_supply_id_supply_unique")
                        .IsUnique();

                    b.ToTable("SUPPLY_CATEGORIES_X_SUPPLY", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.SupplyCategoryModel", b =>
                {
                    b.Property<long>("IdSupplyCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_supply_category");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdSupplyCategory"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("StatedAt")
                        .IsRequired()
                        .HasColumnType("bit")
                        .HasColumnName("stated_at");

                    b.HasKey("IdSupplyCategory")
                        .HasName("supply_categories_id_supply_category_primary");

                    b.ToTable("SUPPLY_CATEGORIES", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.SupplyDetailModel", b =>
                {
                    b.Property<long>("IdSupplyDetails")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_supply_details");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdSupplyDetails"), 1L, 1);

                    b.Property<int>("ActualQuantity")
                        .HasColumnType("int")
                        .HasColumnName("actual_quantity");

                    b.Property<string>("Batch")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("batch");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("entry_date");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("expiration_date");

                    b.Property<long>("IdProvider")
                        .HasColumnType("bigint")
                        .HasColumnName("id_provider");

                    b.Property<long>("IdSupply")
                        .HasColumnType("bigint")
                        .HasColumnName("id_supply");

                    b.Property<int>("InitialQuantity")
                        .HasColumnType("int")
                        .HasColumnName("initial_quantity");

                    b.Property<bool?>("StatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("stated_at")
                        .HasDefaultValueSql("('1')");

                    b.Property<decimal>("SupplyCost")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("supply_cost");

                    b.HasKey("IdSupplyDetails")
                        .HasName("pk_SUPPLY_DETAILS");

                    b.HasIndex("IdProvider");

                    b.HasIndex("IdSupply");

                    b.ToTable("SUPPLY_DETAILS", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.SupplyModel", b =>
                {
                    b.Property<long>("IdSupply")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_supply");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdSupply"), 1L, 1);

                    b.Property<string>("Advices")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("advices");

                    b.Property<decimal?>("AverageCost")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("average_cost");

                    b.Property<string>("DangerIndicators")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("danger_indicators");

                    b.Property<long>("IdWarehouse")
                        .HasColumnType("bigint")
                        .HasColumnName("id_warehouse");

                    b.Property<long>("IdWarehouseNavigationIdWarehouse")
                        .HasColumnType("bigint");

                    b.Property<long>("MinimunUnitMeasureId")
                        .HasColumnType("bigint")
                        .HasColumnName("minimun_unit_measure_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int>("SortingWord")
                        .HasColumnType("int")
                        .HasColumnName("sorting_word");

                    b.Property<bool?>("StatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("stated_at")
                        .HasDefaultValueSql("('1')");

                    b.Property<int>("SupplyType")
                        .HasColumnType("int")
                        .HasColumnName("supply_type");

                    b.Property<string>("UseInstructions")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("use_instructions");

                    b.HasKey("IdSupply")
                        .HasName("supplies_id_supply_primary");

                    b.HasIndex("IdWarehouseNavigationIdWarehouse");

                    b.HasIndex(new[] { "IdWarehouse" }, "supplies_id_warehouse_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "MinimunUnitMeasureId" }, "supplies_minimun_unit_measure_id_unique")
                        .IsUnique();

                    b.ToTable("SUPPLIES", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.SupplyPictogramModel", b =>
                {
                    b.Property<long>("IdPictogram")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_pictogram");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdPictogram"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<byte[]>("Pictogram")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("pictogram");

                    b.Property<bool?>("StatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("stated_at")
                        .HasDefaultValueSql("('1')");

                    b.HasKey("IdPictogram")
                        .HasName("supply_pictograms_id_pictogram_primary");

                    b.ToTable("SUPPLY_PICTOGRAMS", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.SupplyXProductModel", b =>
                {
                    b.Property<long>("IdProduct")
                        .HasColumnType("bigint")
                        .HasColumnName("id_product");

                    b.Property<long>("IdSupply")
                        .HasColumnType("bigint")
                        .HasColumnName("id_supply");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdSupply");

                    b.ToTable("SUPPLY_X_PRODUCT", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.SupplyXSupplyPictogramModel", b =>
                {
                    b.Property<long>("IdSupply")
                        .HasColumnType("bigint")
                        .HasColumnName("id_supply");

                    b.Property<long>("IdSupplyPictogram")
                        .HasColumnType("bigint")
                        .HasColumnName("id_supply_pictogram");

                    b.HasIndex(new[] { "IdSupplyPictogram" }, "supply_x_supply_pictograms_id_supply_pictogram_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "IdSupply" }, "supply_x_supply_pictograms_id_supply_unique")
                        .IsUnique();

                    b.ToTable("SUPPLY_X_SUPPLY_PICTOGRAMS", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.TypeDocumentModel", b =>
                {
                    b.Property<long>("IdTypeDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_type_document");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdTypeDocument"), 1L, 1);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("abbreviation");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("StatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("stated_at")
                        .HasDefaultValueSql("('1')");

                    b.HasKey("IdTypeDocument")
                        .HasName("type_documents_id_type_document_primary");

                    b.ToTable("TYPE_DOCUMENTS", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.TypeServiceModel", b =>
                {
                    b.Property<long>("IdTypeService")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_type_service");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdTypeService"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("StatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("stated_at")
                        .HasDefaultValueSql("('1')");

                    b.HasKey("IdTypeService")
                        .HasName("pk_TYPE_SERVICE");

                    b.ToTable("TYPE_SERVICE", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.UnitMeasureModel", b =>
                {
                    b.Property<long>("IdUnitMeasur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_unit_measur");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdUnitMeasur"), 1L, 1);

                    b.Property<int>("Abbreviation")
                        .HasColumnType("int")
                        .HasColumnName("abbreviation");

                    b.Property<long?>("BaseId")
                        .HasColumnType("bigint")
                        .HasColumnName("base_id");

                    b.Property<decimal>("ConversionFactor")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("conversion_factor");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("StatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("stated_at")
                        .HasDefaultValueSql("('1')");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("IdUnitMeasur")
                        .HasName("unit_measures_id_unit_measur_primary");

                    b.ToTable("UNIT_MEASURES", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.UnitMeasuresXSupplyModel", b =>
                {
                    b.Property<long>("IdSupply")
                        .HasColumnType("bigint")
                        .HasColumnName("id_supply");

                    b.Property<long>("IdUnitMeasure")
                        .HasColumnType("bigint")
                        .HasColumnName("id_unit_measure");

                    b.HasIndex(new[] { "IdSupply" }, "unit_measures_x_supply_id_supply_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "IdUnitMeasure" }, "unit_measures_x_supply_id_unit_measure_unique")
                        .IsUnique();

                    b.ToTable("UNIT_MEASURES_X_SUPPLY", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.UserModel", b =>
                {
                    b.Property<long>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_user");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdUser"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("address");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("document_number");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("email");

                    b.Property<long>("IdRole")
                        .HasColumnType("bigint")
                        .HasColumnName("id_role");

                    b.Property<long>("IdTypeDocument")
                        .HasColumnType("bigint")
                        .HasColumnName("id_type_document");

                    b.Property<string>("LastNames")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("last_names");

                    b.Property<string>("PasswordDigest")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("password_digest");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("phone");

                    b.Property<bool?>("StatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("stated_at")
                        .HasDefaultValueSql("('1')");

                    b.Property<string>("Surnames")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nchar(255)")
                        .HasColumnName("surnames")
                        .IsFixedLength();

                    b.HasKey("IdUser")
                        .HasName("users_id_user_primary");

                    b.HasIndex(new[] { "DocumentNumber" }, "users_document_number_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "IdRole" }, "users_id_role_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "IdTypeDocument" }, "users_id_type_document_unique")
                        .IsUnique();

                    b.ToTable("USERS", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.WarehouseModel", b =>
                {
                    b.Property<long>("IdWarehouse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_warehouse");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdWarehouse"), 1L, 1);

                    b.Property<long?>("IdTypeWarehouse")
                        .HasColumnType("bigint")
                        .HasColumnName("id_type_warehouse");

                    b.Property<long?>("IdTypeWarehouseNavigationIdTypeWarehouse")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("StatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("stated_at")
                        .HasDefaultValueSql("('1')");

                    b.Property<string>("Ubication")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ubication");

                    b.HasKey("IdWarehouse")
                        .HasName("warehouse_id_warehouse_primary");

                    b.HasIndex("IdTypeWarehouseNavigationIdTypeWarehouse");

                    b.HasIndex(new[] { "IdTypeWarehouse" }, "warehause_id_type_warehouse_unique")
                        .IsUnique()
                        .HasFilter("[id_type_warehouse] IS NOT NULL");

                    b.ToTable("WAREHOUSE", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.WarehouseTypeModel", b =>
                {
                    b.Property<long>("IdTypeWarehouse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_type_warehouse");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdTypeWarehouse"), 1L, 1);

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Nametype")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("nametype");

                    b.Property<bool?>("StatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("stated_at")
                        .HasDefaultValueSql("('1')");

                    b.HasKey("IdTypeWarehouse")
                        .HasName("pk_Tbl");

                    b.ToTable("WAREHOUSE_TYPE", (string)null);
                });

            modelBuilder.Entity("DataCape.Models.OrderProductionModel", b =>
                {
                    b.HasOne("DataCape.Models.GrammajeCaliberModel", "IdGrammageNavigation")
                        .WithMany("OrderProductions")
                        .HasForeignKey("IdGrammage")
                        .HasConstraintName("FK_ORDER_PRODUCTION_GRAMMAJE_CALIBER");

                    b.HasOne("DataCape.Models.LineatureModel", "IdLineatureNavigation")
                        .WithMany("OrderProductions")
                        .HasForeignKey("IdLineature")
                        .HasConstraintName("FK_ORDER_PRODUCTION_LINEATURE");

                    b.HasOne("DataCape.Models.PaperCutModel", "IdPaperCutSizeNavigation")
                        .WithMany("OrderProductions")
                        .HasForeignKey("IdPaperCutSize")
                        .HasConstraintName("FK_ORDER_PRODUCTION_PAPER_CUT");

                    b.HasOne("DataCape.Models.ImpositionPlateModel", "IdPlateImpositionNavigation")
                        .WithMany("OrderProductions")
                        .HasForeignKey("IdPlateImposition")
                        .HasConstraintName("FK_ORDER_PRODUCTION_IMPOSITION_PLATE");

                    b.HasOne("DataCape.Models.ProgramModel", "IdProgramNavigation")
                        .WithMany("OrderProductions")
                        .HasForeignKey("IdProgram")
                        .HasConstraintName("FK_ORDER_PRODUCTION_PROGRAM");

                    b.HasOne("DataCape.Models.QuotationClientModel", "IdQuotationClientNavigation")
                        .WithMany("OrderProductions")
                        .HasForeignKey("IdQuotationClient")
                        .HasConstraintName("id_quotation_products");

                    b.HasOne("DataCape.Models.UserModel", "IdUserNavigation")
                        .WithMany("OrderProductions")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("id_user");

                    b.Navigation("IdGrammageNavigation");

                    b.Navigation("IdLineatureNavigation");

                    b.Navigation("IdPaperCutSizeNavigation");

                    b.Navigation("IdPlateImpositionNavigation");

                    b.Navigation("IdProgramNavigation");

                    b.Navigation("IdQuotationClientNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("DataCape.Models.PermissionsXRoleModel", b =>
                {
                    b.HasOne("DataCape.Models.PermissionModel", "IdPermissionNavigation")
                        .WithOne()
                        .HasForeignKey("DataCape.Models.PermissionsXRoleModel", "IdPermission")
                        .IsRequired()
                        .HasConstraintName("permissions_x_roles_id_permission_foreign");

                    b.HasOne("DataCape.Models.RoleModel", "IdRoleNavigation")
                        .WithOne()
                        .HasForeignKey("DataCape.Models.PermissionsXRoleModel", "IdRole")
                        .IsRequired()
                        .HasConstraintName("permissions_x_roles_id_role_foreign");

                    b.Navigation("IdPermissionNavigation");

                    b.Navigation("IdRoleNavigation");
                });

            modelBuilder.Entity("DataCape.Models.QuotationClientModel", b =>
                {
                    b.HasOne("DataCape.Models.ClientModel", "IdClientNavigation")
                        .WithMany("QuotationClients")
                        .HasForeignKey("IdClient")
                        .HasConstraintName("id_client");

                    b.HasOne("DataCape.Models.FinishModel", "IdFinishesNavigation")
                        .WithMany("QuotationClients")
                        .HasForeignKey("IdFinishes")
                        .HasConstraintName("id_finish");

                    b.HasOne("DataCape.Models.MachineModel", "IdMachineNavigation")
                        .WithMany("QuotationClients")
                        .HasForeignKey("IdMachine")
                        .HasConstraintName("id_machine");

                    b.HasOne("DataCape.Models.ProductModel", "IdProductNavigation")
                        .WithMany("QuotationClients")
                        .HasForeignKey("IdProduct")
                        .HasConstraintName("id_product");

                    b.HasOne("DataCape.Models.TypeServiceModel", "IdTypeServiceNavigation")
                        .WithMany("QuotationClients")
                        .HasForeignKey("IdTypeService")
                        .HasConstraintName("id_type_service");

                    b.HasOne("DataCape.Models.UserModel", "IdUserNavigation")
                        .WithMany("QuotationClients")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_QUOTATION_CLIENTS_USERS");

                    b.Navigation("IdClientNavigation");

                    b.Navigation("IdFinishesNavigation");

                    b.Navigation("IdMachineNavigation");

                    b.Navigation("IdProductNavigation");

                    b.Navigation("IdTypeServiceNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("DataCape.Models.QuotationProviderModel", b =>
                {
                    b.HasOne("DataCape.Models.ProviderModel", "IdProviderNavigation")
                        .WithMany("QuotationProviders")
                        .HasForeignKey("IdProvider")
                        .HasConstraintName("id_provider");

                    b.Navigation("IdProviderNavigation");
                });

            modelBuilder.Entity("DataCape.Models.SubstrateXQuotationClientModel", b =>
                {
                    b.HasOne("DataCape.Models.QuotationClientModel", "IdQuotationClientNavigation")
                        .WithMany()
                        .HasForeignKey("IdQuotationClient")
                        .IsRequired()
                        .HasConstraintName("FK_SUBSTRATE_X_QUOTATION_CLIENT_QUOTATION_CLIENTS");

                    b.HasOne("DataCape.Models.SubstrateModel", "IdSubstrateNavigation")
                        .WithMany()
                        .HasForeignKey("IdSubstrate")
                        .IsRequired()
                        .HasConstraintName("FK_SUBSTRATE_X_QUOTATION_CLIENT_SUBSTRATES");

                    b.Navigation("IdQuotationClientNavigation");

                    b.Navigation("IdSubstrateNavigation");
                });

            modelBuilder.Entity("DataCape.Models.SupplyCategoriesXSupplyModel", b =>
                {
                    b.HasOne("DataCape.Models.SupplyModel", "IdSupplyNavigation")
                        .WithOne()
                        .HasForeignKey("DataCape.Models.SupplyCategoriesXSupplyModel", "IdSupply")
                        .IsRequired()
                        .HasConstraintName("supply_categories_x_supply_id_supply_foreign");

                    b.HasOne("DataCape.Models.SupplyCategoryModel", "IdSupplyCategoryNavigation")
                        .WithOne()
                        .HasForeignKey("DataCape.Models.SupplyCategoriesXSupplyModel", "IdSupplyCategory")
                        .IsRequired()
                        .HasConstraintName("supply_categories_x_supply_id_supply_category_foreign");

                    b.Navigation("IdSupplyCategoryNavigation");

                    b.Navigation("IdSupplyNavigation");
                });

            modelBuilder.Entity("DataCape.Models.SupplyDetailModel", b =>
                {
                    b.HasOne("DataCape.Models.ProviderModel", "IdProviderNavigation")
                        .WithMany("SupplyDetails")
                        .HasForeignKey("IdProvider")
                        .IsRequired()
                        .HasConstraintName("FK_SUPPLY_DETAILS_PROVIDERS");

                    b.HasOne("DataCape.Models.SupplyModel", "IdSupplyNavigation")
                        .WithMany("SupplyDetails")
                        .HasForeignKey("IdSupply")
                        .IsRequired()
                        .HasConstraintName("id_supply");

                    b.Navigation("IdProviderNavigation");

                    b.Navigation("IdSupplyNavigation");
                });

            modelBuilder.Entity("DataCape.Models.SupplyModel", b =>
                {
                    b.HasOne("DataCape.Models.WarehouseModel", "IdWarehouseNavigation")
                        .WithMany("Supply")
                        .HasForeignKey("IdWarehouseNavigationIdWarehouse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdWarehouseNavigation");
                });

            modelBuilder.Entity("DataCape.Models.SupplyXProductModel", b =>
                {
                    b.HasOne("DataCape.Models.ProductModel", "IdProductNavigation")
                        .WithMany()
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("FK_SUPPLY_X_PRODUCT_PRODUCTS");

                    b.HasOne("DataCape.Models.SupplyModel", "IdSupplyNavigation")
                        .WithMany()
                        .HasForeignKey("IdSupply")
                        .IsRequired()
                        .HasConstraintName("FK_SUPPLY_X_PRODUCT_SUPPLIES");

                    b.Navigation("IdProductNavigation");

                    b.Navigation("IdSupplyNavigation");
                });

            modelBuilder.Entity("DataCape.Models.SupplyXSupplyPictogramModel", b =>
                {
                    b.HasOne("DataCape.Models.SupplyModel", "IdSupplyNavigation")
                        .WithOne()
                        .HasForeignKey("DataCape.Models.SupplyXSupplyPictogramModel", "IdSupply")
                        .IsRequired()
                        .HasConstraintName("supply_x_supply_pictograms_id_supply_foreign");

                    b.HasOne("DataCape.Models.SupplyPictogramModel", "IdSupplyPictogramNavigation")
                        .WithOne()
                        .HasForeignKey("DataCape.Models.SupplyXSupplyPictogramModel", "IdSupplyPictogram")
                        .IsRequired()
                        .HasConstraintName("supply_x_supply_pictograms_id_supply_pictogram_foreign");

                    b.Navigation("IdSupplyNavigation");

                    b.Navigation("IdSupplyPictogramNavigation");
                });

            modelBuilder.Entity("DataCape.Models.UnitMeasuresXSupplyModel", b =>
                {
                    b.HasOne("DataCape.Models.SupplyModel", "IdSupplyNavigation")
                        .WithOne()
                        .HasForeignKey("DataCape.Models.UnitMeasuresXSupplyModel", "IdSupply")
                        .IsRequired()
                        .HasConstraintName("unit_measures_x_supply_id_supply_foreign");

                    b.HasOne("DataCape.Models.UnitMeasureModel", "IdUnitMeasureNavigation")
                        .WithOne()
                        .HasForeignKey("DataCape.Models.UnitMeasuresXSupplyModel", "IdUnitMeasure")
                        .IsRequired()
                        .HasConstraintName("unit_measures_x_supply_id_unit_measure_foreign");

                    b.Navigation("IdSupplyNavigation");

                    b.Navigation("IdUnitMeasureNavigation");
                });

            modelBuilder.Entity("DataCape.Models.UserModel", b =>
                {
                    b.HasOne("DataCape.Models.RoleModel", "IdRoleNavigation")
                        .WithOne("User")
                        .HasForeignKey("DataCape.Models.UserModel", "IdRole")
                        .IsRequired()
                        .HasConstraintName("users_id_role_foreign");

                    b.HasOne("DataCape.Models.TypeDocumentModel", "IdTypeDocumentNavigation")
                        .WithOne("User")
                        .HasForeignKey("DataCape.Models.UserModel", "IdTypeDocument")
                        .IsRequired()
                        .HasConstraintName("users_id_type_document_foreign");

                    b.Navigation("IdRoleNavigation");

                    b.Navigation("IdTypeDocumentNavigation");
                });

            modelBuilder.Entity("DataCape.Models.WarehouseModel", b =>
                {
                    b.HasOne("DataCape.Models.WarehouseTypeModel", "IdTypeWarehouseNavigation")
                        .WithMany("Warehouse")
                        .HasForeignKey("IdTypeWarehouseNavigationIdTypeWarehouse");

                    b.Navigation("IdTypeWarehouseNavigation");
                });

            modelBuilder.Entity("DataCape.Models.ClientModel", b =>
                {
                    b.Navigation("QuotationClients");
                });

            modelBuilder.Entity("DataCape.Models.FinishModel", b =>
                {
                    b.Navigation("QuotationClients");
                });

            modelBuilder.Entity("DataCape.Models.GrammajeCaliberModel", b =>
                {
                    b.Navigation("OrderProductions");
                });

            modelBuilder.Entity("DataCape.Models.ImpositionPlateModel", b =>
                {
                    b.Navigation("OrderProductions");
                });

            modelBuilder.Entity("DataCape.Models.LineatureModel", b =>
                {
                    b.Navigation("OrderProductions");
                });

            modelBuilder.Entity("DataCape.Models.MachineModel", b =>
                {
                    b.Navigation("QuotationClients");
                });

            modelBuilder.Entity("DataCape.Models.PaperCutModel", b =>
                {
                    b.Navigation("OrderProductions");
                });

            modelBuilder.Entity("DataCape.Models.ProductModel", b =>
                {
                    b.Navigation("QuotationClients");
                });

            modelBuilder.Entity("DataCape.Models.ProgramModel", b =>
                {
                    b.Navigation("OrderProductions");
                });

            modelBuilder.Entity("DataCape.Models.ProviderModel", b =>
                {
                    b.Navigation("QuotationProviders");

                    b.Navigation("SupplyDetails");
                });

            modelBuilder.Entity("DataCape.Models.QuotationClientModel", b =>
                {
                    b.Navigation("OrderProductions");
                });

            modelBuilder.Entity("DataCape.Models.RoleModel", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("DataCape.Models.SupplyModel", b =>
                {
                    b.Navigation("SupplyDetails");
                });

            modelBuilder.Entity("DataCape.Models.TypeDocumentModel", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("DataCape.Models.TypeServiceModel", b =>
                {
                    b.Navigation("QuotationClients");
                });

            modelBuilder.Entity("DataCape.Models.UserModel", b =>
                {
                    b.Navigation("OrderProductions");

                    b.Navigation("QuotationClients");
                });

            modelBuilder.Entity("DataCape.Models.WarehouseModel", b =>
                {
                    b.Navigation("Supply");
                });

            modelBuilder.Entity("DataCape.Models.WarehouseTypeModel", b =>
                {
                    b.Navigation("Warehouse");
                });
#pragma warning restore 612, 618
        }
    }
}
